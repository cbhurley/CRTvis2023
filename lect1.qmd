---
title: "Data visualisation in R"
author:
  - name: "Catherine Hurley"
    affiliation: Maynooth University
    email: catherine.hurley@mu.ie
format:
  html:
    toc: true
    toc-location: left
    code-overflow: wrap
    code-tools: true
    df-print: tibble
---










```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=F)
```
# Part I: Introduction to ggplot2


## Recommended book


```{r, echo=F, eval=T, out.width="25%", fig.align='center'}
knitr::include_graphics("figs/wainer.png")
```


## Preparation

You will find the material for this lecture on github here <https://github.com/cbhurley/CRT2023vis>
and a copy of this lecture
[here](http://htmlpreview.github.io/?https://github.com/cbhurley/CRT2022vis/blob/master/lect1.html)

First install these packages

```{r, eval=F}
install.packages(c("tidyverse", "dataReporter", "timetk","palmerpenguins"))
```

and load with

```{r}
library(tidyverse)
library(timetk) # for the data
library(palmerpenguins) # more data
```



## Why visualise data?

### Goals
Visualisations are for

- **show**ing the data
- making **comparisions**
- exploring **relationships**
- telling a story

Visualisations can also be used to 

- show model results
- look at relationships derived from models
- compare models


For **exploring** data/models, there are usually many graphs made in the process of discovering information.

**Presentation graphics** are used as a visual aid in a presentation.\
  Usually, there are just one or two graphs carefully selected to deliver a message or tell a story.\
  "A picture is worth a thousand words"..... If the picture is carefully selected, and constructed with informative legends and captions. The picture might need the help of some words to help tell the story.
 

### Summary measures may be misleading
We can summarise data with numeric summaries like mean, standard deviation and correlation.
Why do we need more?

```{r, anscombe, echo=F,purl=FALSE}
summary(anscombe[,1:4])
summary(anscombe[,5:8])
##-- now some "magic" to do the 4 regressions in a loop:
ff <- y ~ x
mods <- setNames(as.list(1:4), paste0("lm", 1:4))

for(i in 1:4) {
  ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
  ## or   ff[[2]] <- as.name(paste0("y", i))
  ##      ff[[3]] <- as.name(paste0("x", i))
  mods[[i]] <- lmi <- lm(ff, data = anscombe)
  # print(anova(lmi))
}

## See how close they are (numerically!)
# sapply(mods, coef)
# lapply(mods, function(fm) coef(summary(fm)))

## Now, do what you should have done in the first place: PLOTS
op <- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))
for(i in 1:4) {
  ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
  plot(ff, data = anscombe, col = "red", pch = 21, bg = "orange", cex = 1.2,
       xlim = c(3, 19), ylim = c(3, 13))
  abline(mods[[i]], col = "blue")
  cc <- cor(anscombe[[paste0(c("x",i), collapse="")]], anscombe[[paste0(c("y",i), collapse="")]])
  title(paste0("cor=", round(cc,4), collapse=""))
}
mtext("Anscombe's 4 Regression data sets", outer = TRUE, cex = 1.5)
par(op)

```

Along the same lines is the Datasaurus dataset of Alberto Cairo, who constructs 12 pairwise plots
sharing summary stats with a point plot of a dinosaur. See
<https://www.autodesk.com/research/publications/same-stats-different-graphs>
and  <https://cran.r-project.org/web/packages/datasauRus/vignettes/Datasaurus.html>


## Telling a story- Examples


### Florence Nightingale coxcomb plot 

Florence Nightingale constructed the diagram below to highlight cause of death of soldiers during the Crimean war.

The radius of the big wedge in light blue shows the number of deaths from disease.

The pink wedge shows the deaths from battle woounds, and in grey, death from other causes.


The idea was to show that most deaths are from bad sanitation.
Florence distributed pamphlets with this information to politicians to advocate for proper hospitals.


```{r, echo=F, eval=T, out.width="100%", fig.align='center'}
knitr::include_graphics("figs/Coxcomb1.png")
```

And recreated in ggplot2 by the UL CRT student Edward Gunning <https://github.com/edwardgunning/FlorenceNightingale>

Here is a very interesting podcast about Florence Nightingale. <https://timharford.com/2021/03/cautionary-tales-florence-nightingale-and-her-geeks-declare-war-on-death/>.
(FN played in this episode by her distant cousin Helena Bonham Carter!)


<!-- If you want to learn more <https://thisisstatistics.org/florence-nightingale-the-lady-with-the-data/> -->


### US vs UK life expectancy

From a March 2023 Financial Times article (John-Burn Murdoch)

```{r, echo=F, eval=T, out.width="100%", fig.align='center'}
knitr::include_graphics("figs/murdoch.jpeg")

```


More on a related topic from the New York Times, which makes extensive use of visualisations to explore infant mortality in the US, which is much higher than in other western countries.

You can read the article <https://www.nytimes.com/interactive/2023/02/12/upshot/child-maternal-mortality-rich-poor.html>.





### What is the best coffee?


```{r, echo=F, eval=T, out.width="100%", fig.align='center'}
knitr::include_graphics("figs/2020_28_CoffeeRatings.png")

```

From <https://www.cedricscherer.com> and the code is available on his github <https://github.com/z3tt/TidyTuesday/blob/main/R/2020_28_CoffeeRatings.Rmd>

### Podcast explore explain

Design of coronavirus tracker (John Burn-Murdoch)
<https://visualisingdata.com/2020/05/explore-explain-s1-e3-john-burn-murdoch/>

## The data

We will use a bike sharing dataset, from the UCI machine learning archive <https://archive.ics.uci.edu/ml/machine-learning-databases/00275/>

There is daily data and hourly, we will use the hourly.


The data is available in the R package `timetk`.

```{r, getdata}

glimpse(bike_sharing_daily)
```

This dataset contains the daily count of rental bike transactions between years 2011 and 2012 in the Capital bikeshare system with the corresponding weather and seasonal information.

The two temperature variables temp and atemp (feeling temperature), both are normalised.

Notice the dataset is a  `tbl`, which is a variant of `data.frame`.


A good way to check the data for oddities is to use a package that will do a plot, and summary of 
all the variables. You could do this manually, one variable at a time, but this saves work:

```{r, report, eval=F}
dataReporter::makeDataReport(bike_sharing_daily,replace=TRUE)
```

You will find the results at 
[dataReporter_bike.pdf](dataReporter_bike.pdf)

Some of these variables should be factors, so we will fix this up first, using `mutate`

```{r, fixdata}

bike <- bike_sharing_daily

bike <- mutate(bike, 
               season= recode_factor(season,
                                     `1`="Winter", `2`="Spring", `3`="Summer", `4`="Fall"))
```

The season variable is numeric and it should be a factor. `recode_factor` will change it to a factor. It also orders
the levels corresponding to their numeric ordering.

```{r}
head(bike$season)
```

We will do similar on the variables `mnth`, `holiday`, `workingday`, `weathersit`.

```{r}
bike <- bike |>
  mutate(weathersit= 
           recode_factor(weathersit, 
                         `1`="clear", `2`="cloudy", `3`="lightP", `4`="heavyP"))
```

Notice here we also make use of the pipe `|>` operator. The data `bike` is fed as input into the next calculation.

```{r}
bike <- bike |>
  mutate(holiday=recode_factor(holiday, `0` = "No", `1`="Yes")) |>
  mutate(workingday = recode_factor(workingday, `0` = "No", `1`="Yes")) |>
  mutate(yr = recode_factor(yr,`0` = 2011, `1`=2012))
```

For the variable month, we would like to recode to the values in

```{r}
month.abb
```

without having to type all the months in.

```{r}
bike$month <- factor(month.abb[bike$mnth], levels=month.abb) # will order the months correctly
bike$yday <- lubridate::yday(bike$dteday)  # gives the day in year of the dteday variable
days_of_week <- weekdays(ISOdate(1, 1, 7:13), TRUE)

bike$weekday <- factor(days_of_week[bike$weekday +1], levels=days_of_week) # same
bike$mnth <- NULL # remove
bike$instant <- NULL # remove
```

```{r, eval=T}
save(bike, file="bike.Rdata")
```


Now we check the data again
```{r}
glimpse(bike)
```



One thing to note from the results, is that `weathersit` has only three levels. The level `heavyP` did not occur in the data and was dropped by `recode_factor`.


## ggplot2

In R, you can use base R (`barplot`, `hist`, `plot`). Here we will use `ggplot2` functions.

`ggplot2` is an R package authored by Hadley Wickham for elegant graphics in R.
Click on this link <https://ggplot2.tidyverse.org> for lots of information.


Also check out the primer at
<https://rstudio.cloud/learn/primers/3>

You will find more references at the end of these notes.


## Basic plots

### Histogram {-}
Our report used one plot per variable, barplots for factors and histograms for numeric variables.




```{r, fig.width=3.5, fig.height=3, fig.align="center"}
ggplot(data=bike, 
       mapping= aes(x=cnt)) + geom_histogram()
ggplot(data=bike, mapping= aes(x=cnt)) + 
  geom_histogram(fill="lightblue", color="navy")
```

- Here `mapping` describes how the data is mapped to aesthetics.

- `aes` = Aesthetics are the variables you see on the plot. Here that `cnt` goes on the x axis.

- The `geom` is what is drawn, here a histogram.

- In the second variant, the fill colour and outline colour for the bars is specified.

- You could use another variable for the fill or color:

```{r, fig.width=4.5, fig.height=3.5, fig.align="center"}
ggplot(data=bike, mapping= aes(x=cnt, fill=yr)) + 
  geom_histogram(color="black")
```

- You are seeing here for each bar, the count for 2011 and 2012. 

### Barplot {-}

For the barplot, the x variable is a factor, or something that can be interpreted as a factor.

```{r,  fig.width=3.5, fig.height=3, fig.align="center"}
ggplot(data=bike, mapping= aes(x=weathersit)) + 
  geom_bar(fill="lightblue", color="navy")
```

You can add color to this

```{r,  fig.width=4.5, fig.height=3, fig.align="center"}
ggplot(data=bike, mapping= aes(x=weathersit, fill=yr)) + 
  geom_bar( )
```

and switch to proportions with

```{r,  fig.width=4.5, fig.height=3, fig.align="center"}
ggplot(data=bike, mapping= aes(x=weathersit, fill=yr)) + 
  geom_bar(position="fill")
```

`geom_col` is like `geom_bar`, except you have a y variable.
The plot below shows the number of bikes rented for each month, and in the second
variant we colour by year.

```{r,  fig.width=4.5, fig.height=3, fig.align="center"}

ggplot(data=bike, mapping= aes(x=month, y=cnt)) + 
  geom_col(color="lightblue", fill="lightblue")

```

```{r,  fig.width=5, fig.height=3, fig.align="center"}

ggplot(data=bike, mapping= aes(x=month, y=cnt, fill=yr)) + 
  geom_col()

```

### A scatterplot {-}

The scatterplot is for two numeric variables, and you use `geom_point`

```{r,  fig.width=3.5, fig.height=3, fig.align="center"}
ggplot(data=bike, aes(x=temp, y=cnt)) + geom_point()
```

We can easily bring a third  variable for the point colour, and a fourth for shape:

```{r,  fig.width=4.5, fig.height=3, fig.align="center"}
ggplot(data=bike, aes(x=temp, y=cnt, color=yr)) + 
  geom_point()

ggplot(data=bike, aes(x=temp, y=cnt, color=yr, shape=season)) + 
  geom_point()


```
The plot with shape and colour works better when there is more separation between the groups.

In the plot below, weekday is a numeric variable so it is mapped to shades of blue.
This variable is better represented as a factor, which changes the ggplot.


```{r,  fig.width=4.5, fig.height=3, fig.align="center"}
ggplot(data=bike, aes(x=temp, y=cnt, color=weekday)) + 
  geom_point()

bike$weekday <- factor(bike$weekday)

ggplot(data=bike, aes(x=temp, y=cnt, color=weekday)) + 
  geom_point()

```
Would we expect the relationship between cnt and temp to change with weekday?




### A time plot

```{r,  fig.width=5.5, fig.height=3, fig.align="center"}
ggplot(data=bike, aes(x=dteday, y=cnt)) + 
  geom_line()

```
We could use `geom_point` here but `geom_line` connects the dots.

Note that `dteday` is a `date` variable in the dataset, which is interpreted correctly for the plot.

```{r,  fig.width=5.5, fig.height=3, fig.align="center"}
library(lubridate)
ggplot(data=bike, aes(x=yday, y=cnt, color=yr)) + 
  geom_line()
```

## Practice 1

Using the `penguins` dataset, make these two plots:
```{r, practice1,fig.width=4.5, fig.height=3, fig.align="center", echo=F}

ggplot(penguins, aes(x = island, fill = species)) +
  geom_bar() 


ggplot(data = penguins, aes(x = bill_length_mm, y = bill_depth_mm)) +
  geom_point(aes(color = species,
                 shape = species)) 
```

```{r, practice1,eval=F}
#| code-fold: true
#| code-summary: "Solution"

```
## Anatomy of a ggplot

We have seen that **aesthetics** are linked to variables in a dataset. Aesthetics
we have considered are `x`, `y`, `fill` and `color`.

Here are some other aesthetics (figure from Wilke book)

```{r, echo=F, eval=T, out.width="75%", fig.align='center'}
knitr::include_graphics("figs/aes.png")
```

- shape and line type aesthetics are for categorical data (ie factors)
- others can represent factors or numeric variables

**scales** map data values into aesthetics. Eg use `scale_x_log10()` to log the x coordinates.
Default is `scale_x_continuous`. Adjust this to change axes, for example


```{r,  fig.width=6.5, fig.height=3, fig.align="center"}

ggplot(data=bike, aes(x=yday, y=cnt, color=yr)) + 
  geom_line()+ scale_x_log10()

```

**layers**  components of the plot are added in layers, using `+`

**legend** refers to the color index on the right. You will get legends for fill, linetype and other aesthetics.

**themes** refer to non-data components, the background, title, font and so on. Work on this to pretty-up the plot.

**facets** are important, this is a way to split up a plot by a factor. It increases the number of dimensions that can
be plotted.

```{r,  fig.width=6.5, fig.height=5.5, fig.align="center"}

ggplot(data=bike, aes(x=temp, y=cnt, color=yr)) + 
  geom_point()+
  facet_wrap(vars(season))
```


## More on layers

In ggplot the idea is that you build up to the desired plot bit by bit.

Going back to the scatterplot, let's add a smooth

```{r, fig.width=4.5, fig.height=3, fig.align="center"}

ggplot(bike, aes(x=yday, y=cnt))+
  geom_point(aes(color=yr))+
  geom_smooth(se=FALSE)
```

In the version above, there is one smooth for the two years. This is because the `geom_smooth` inherits the aesthetics from the call to `ggplot`, but as we specified the color in `geom_point` this was not respected by the smooth.

If we move `color=yr` back to  aesthetic in the call to ggplot, the
grouping is also used by the smooth, so we get two separate smooths.


```{r, fig.width=4.5, fig.height=3, fig.align="center"}

ggplot(bike, aes(x=yday, y=cnt, color=yr))+
  geom_point()+
  geom_smooth(se=FALSE)
```




By default `geom_smooth` uses loess, for 1000 observations or less, and a gam otherwise.



## More on facets

More than one variable can be added to the facet wrap. For example, you could use
`facet_wrap(vars(season, yr))`,
or even better `facet_grid`

```{r,  fig.width=9, fig.height=4, fig.align="center"}

ggplot(data=bike, aes(x=temp, y=cnt, color=yr)) + 
  geom_point()+
  facet_grid( rows=vars(workingday),cols=vars(season))
```

And if we add smooths or other fits, these will respect the groups for the colors and facets.


```{r, fig.width=9, fig.height=4, fig.align="center"}
ggplot(data=bike, aes(x=temp, y=cnt, color=yr)) + 
  geom_point()+
  facet_grid( rows=vars(workingday),cols=vars(season))+
  geom_smooth(se=F)
```

Suppose you want to fit regression lines instead, then simply use `method=lm` in the `geom_smooth`.

This will be essentially fitting the model to the interaction of `season` and `yr` with `temp`.

To compare the fit with and without interaction, we create the fit and
added the fitted values to the dataset, and then use `geom_line`.

```{r,  fig.width=9, fig.height=4, fig.align="center"}
fit <- lm(cnt ~ temp+season+yr, data=bike)
bike |> 
  mutate(fit = fitted(fit)) |>
  ggplot(aes(x=temp, y=cnt, color=yr)) + 
  geom_point(size=1)+  # points smaller
  facet_grid( rows=vars(workingday),cols=vars(season))+
  geom_smooth(method=lm, se=F)+
  geom_line(aes(y=fit), linetype="twodash", size=1.5)
```

The fit without interaction does poorly for summer.





## Practice 2

Using the penguins dataset, make these two plots





```{r, practice2,fig.width=9.5, fig.height=3, fig.align="center", echo=F}

ggplot(data = penguins, aes(x = bill_length_mm, y = bill_depth_mm)) +
  geom_point(aes(color = sex))+
  facet_wrap(vars(species))


ggplot(data = penguins, aes(x = bill_length_mm, y = bill_depth_mm, color=sex)) +
  geom_point()+
  facet_wrap(vars(species))+
  geom_smooth(method="lm", se=FALSE)+
  scale_colour_discrete(na.translate = FALSE)
```

Hint: there are a few ways to get rid of the NA in the `sex` legend, one is to use
`scale_colour_discrete(na.translate = FALSE)`

```{r, practice2,eval=F}
#| code-fold: true
#| code-summary: "Solution"

```


After that you can check out many more examples with this data at
<https://allisonhorst.github.io/palmerpenguins/articles/intro.html>


## Alternatives to histogram

### Density plot {-}

We can fit a density estimate to one numeric variable, just replace `geom_histogram`
with `geom_density`

Here we compare the histogram and density

```{r, fig.width=3.5, fig.height=3, fig.align="center", eval=T}
ggplot(data=bike, aes(x=cnt)) + 
  geom_density(color="red")+
  geom_histogram(aes(y=after_stat(density)),fill="lightblue", color="navy", alpha=.5)
```

If you use a fill aesthetic for the density you get
```{r, fig.width=4.5, fig.height=3, fig.align="center", eval=T}
ggplot(data=bike, aes(x=cnt, fill=yr)) + 
  geom_density(alpha=.5)
```
`alpha` gives some transparency.
 
### Boxplots {-}
A boxplot in ggplot needs a y and x variable. 

```{r, fig.width=4.5, fig.height=3, fig.align="center"}
ggplot(data=bike, aes(y=cnt,x=season)) + 
  geom_boxplot() 
```

If you do not need an x variable use:

```{r, fig.width=3.5, fig.height=3, fig.align="center", eval=T}
ggplot(data=bike, aes(y=cnt), x=0) + # any number will do
  geom_boxplot()  
```


Violin plots are a variant using a density folded-over

```{r, fig.width=4.5, fig.height=3, fig.align="center"}
ggplot(data=bike, aes(y=cnt,x=season)) + 
  geom_violin(fill="lightblue")
```


`ggridges` is an add-on package to `ggplot` which  arranges multiple density plots in a staggered fashion

```{r, fig.width=6}

# install.packages("ggridges")
library(ggridges)
ggplot(data=bike, aes(x=cnt,y=season)) + 
  geom_density_ridges(fill="lightblue") +
  xlab(NULL)

```


Sometimes these are referred to as joy plots, as they are similar to cover of the famous Joy Division album Unknown Pleasures.
```{r, echo=F, eval=T, out.width="30%", fig.align='center'}
knitr::include_graphics("figs/shopping.png")
```



```{r, echo=FALSE, eval=FALSE, purl=FALSE}
knitr::purl("lect1.Rmd")
```

